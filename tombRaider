#! /usr/bin/env python3

import rich
import rich_click as click
from function import __version__
from function.tombRaiderFunctions import taxonDependentCoOccurrenceAlgorithm, taxonIndependentCoOccurrenceAlgorithm, mostRecentCommonAncestorAlgorithm, mrcaCalculatorAlgorithm
#from rich import print

# Configuration for rich-click CLI help
click.rich_click.USE_RICH_MARKUP = True
click.rich_click.SHOW_METAVARS_COLUMN = False
click.rich_click.APPEND_METAVARS_HELP = True
click.rich_click.HEADER_TEXT = (f"[yellow]/[/][cyan]/[/][yellow]/[/] [bold][link=https://github.com/gjeunen/tombRaider]tombRaider[/link][/] | v{__version__}")
click.rich_click.FOOTER_TEXT = "See [link=https://github.com/gjeunen/tombRaider]https://github.com/gjeunen/tombRaider[/] for more details."
click.rich_click.ERRORS_SUGGESTION = f"This is tombRaider [cyan]v{__version__}[/]\nFor more help, run '[yellow]tombRaider --help[/]' or visit [link=https://github.com/gjeunen/tombRaider]https://github.com/gjeunen/tombRaider[/]"
click.rich_click.STYLE_ERRORS_SUGGESTION = ""
click.rich_click.OPTION_GROUPS = {
    "tombRaider": [
        {
            "name": "Main function",
            "options": [
                "--method",
            ],
        },
        {
            "name": "Parameters",
            "options": [
                "--occurrence-type",
                "--detection-threshold",
                "--similarity",
                "--negative",
                "--ratio",
            ],
        },
        {
            "name": "Input files",
            "options": [
                "--frequency-input",
                "--sequence-input",
                "--taxonomy-input",
            ],
        },
        {
            "name": "Output files",
            "options": [
                "--frequency-output",
                "--sequence-output",
                "--taxonomy-output",
                "--log",
            ],
        },
        {
            "name": "Taxonomy file details",
            "options": [
                "--seqname",
                "--taxid",
                "--pident",
                "--qcov",
                "--eval",
            ],
        },
    ],
}

@click.command(context_settings=dict(help_option_names=["-h", "--help"]))
@click.option("--method", default = 'taxon-dependent co-occurrence', help = "merging method ('taxon-dependent co-occurrence' [default], 'taxon-independent co-occurrence', 'most recent common ancestor', 'mrca calculator')")
@click.option("--frequency-input", "frequency_input_", help = "frequency table input file name")
@click.option("--sequence-input", "sequence_input_", help = "sequence input file name")
@click.option("--taxonomy-input", "taxonomy_input_", help = "taxonomy input file name")
@click.option("--frequency-output", "frequency_output_", help = "frequency table output file name")
@click.option("--sequence-output", "sequence_output_", help = "sequence output file name")
@click.option("--taxonomy-output", "taxonomy_output_", help = "taxonomy output file name")
@click.option("--log", help = "log output file name")
@click.option("--occurrence-type", "occurrence_type_", default = 'abundance', help = "data structure type to assess co-occurrence pattern ('presence-absence' or 'abundance' [default])")
@click.option("--detection-threshold", "detection_threshold_", default = 1, help = "detection threshold to consider true detection")
@click.option("--similarity", default = 90, help = "similarity threshold needed between child and parent")
@click.option("--negative", help = "list of negative control samples")
@click.option("--ratio", default = 1.0, help = "minimum ratio for co-occurrence pattern to hold true")
@click.option("--seqname", default = 0, help = "position of the sequence name information in the BLAST input file")
@click.option("--taxid", default = 3, help = "position of the taxonomic id number information in the BLAST input file")
@click.option("--pident", default = 5, help = "position of the percent identity information in the BLAST input file")
@click.option("--qcov", default = 7, help = "position of the query coverage information in the BLAST input file")
@click.option("--eval", "eval_", default = 8, help = "position of the e-value information in the BLAST input file")


def tombRaider(method, frequency_input_, sequence_input_, taxonomy_input_, frequency_output_, sequence_output_, taxonomy_output_, log, occurrence_type_, detection_threshold_, similarity, negative, ratio, seqname, taxid, pident, qcov, eval_):
    """tombRaider is a taxon-dependent co-occurrence algorithm to identify and remove artefact sequences from metabarcoding datasets.
    
    The algorithm identifies parent-child sequences based on taxonomic ID from raw BLAST outputs, sequence similarity thesholds, and sample co-occurrence. Besides the main algorithm, implementations for two other approaches to identify artefact sequences are incorporated, including taxon-independent co-occurrence models and
    Most Recent Common Ancestor merging. To run the code, supply your count table, sequence fasta file, and raw BLAST output file, as well as new file names for each where the collated results are written to.
    Additionally, the occurrence type can be specified for presence-absence or abundance, while thresholds for similarity and minimum detection can be added numerically.
    


    To create the BLAST input file, use the '-outfmt 6 qaccver saccver ssciname staxid length pident mismatch qcovs evalue bitscore qstart qend sstart send gapopen' parameter specifications to enable the default settings for '--seqname' , '--taxid', '--pident', '--qcov', and '--eval'. Otherwise provide numerical values for where the information can be found. NOTE: tombRaider starts counting from 0. So, if the information is found in the first column, enter 0. Other formats besides '-outfmt 6' are currently not supported by tombRaider.

    
    
    For example, to run tombRaider, use: 
    
    [blue bold]tombRaider --method 'taxon-dependent co-occurrence' --frequency-input count.txt --taxonomy-input blast.txt --sequence-input otu.fasta --frequency-output count_new.txt --sequence-output otu_new.fasta --taxonomy-output blast_new.txt --occurrence-type abundance --similarity 90 --abundance 3[/]
    """
    console = rich.console.Console(stderr=True, highlight=False)
    console.print(f"\n[yellow]/[/][cyan]/[/][yellow]/[/] [bold][link=https://github.com/gjeunen/tombRaider]tombRaider[/link][/] | v{__version__}\n")

    # check --method option is valid and pass parameters to the function file
    if method == 'taxon-dependent co-occurrence':
        console.print(f"[cyan]|              Method[/] | {method} (default)")
        _ = taxonDependentCoOccurrenceAlgorithm(frequency_input_, sequence_input_, taxonomy_input_, frequency_output_, sequence_output_, taxonomy_output_, log, occurrence_type_, detection_threshold_, similarity, negative, ratio, seqname, taxid, pident, qcov, eval_)
    elif method == 'taxon-independent co-occurrence':
        console.print(f"[cyan]|              Method[/] | {method}")
        _ = taxonIndependentCoOccurrenceAlgorithm(frequency_input_, sequence_input_, taxonomy_input_, frequency_output_, sequence_output_, taxonomy_output_, occurrence_type_, detection_threshold_, similarity)
    elif method == 'most recent common ancestor':
        console.print(f"[cyan]|              Method[/] | {method}")
        _ = mostRecentCommonAncestorAlgorithm(frequency_input_, sequence_input_, taxonomy_input_, frequency_output_, sequence_output_, taxonomy_output_, occurrence_type_, detection_threshold_, similarity, seqname, taxid, pident, qcov, eval_)
    elif method == 'mrca calculator':
        _ = mrcaCalculatorAlgorithm(frequency_input_, sequence_input_, taxonomy_input_, frequency_output_, sequence_output_, taxonomy_output_, occurrence_type_, detection_threshold_, similarity, seqname, taxid, pident, qcov, eval_)
    elif method == None:
        console.print("[cyan]|              Method[/] | [bold yellow]parameter --method not specified, aborting analysis...[/]")
        exit()
    else:
        console.print("[cyan]|               ERROR[/] | [bold yellow]option for '--method' not identified, aborting analysis...[/]\n")
        exit()

if __name__ == "__main__":
    tombRaider()