#! /usr/bin/env python3

import os
import rich
import rich_click as click
from function import __version__
from function.tombRaiderFunctions import taxonDependentCoOccurrenceAlgorithm, taxonIndependentCoOccurrenceAlgorithm, taxonDependentMergingAlgorithm
#from rich import print

# Configuration for rich-click CLI help
click.rich_click.USE_RICH_MARKUP = True
click.rich_click.SHOW_METAVARS_COLUMN = False
click.rich_click.APPEND_METAVARS_HELP = True
click.rich_click.HEADER_TEXT = (f"[yellow]/[/][cyan]/[/][yellow]/[/] [bold][link=https://github.com/gjeunen/tombRaider]tombRaider[/link][/] | v{__version__}")
click.rich_click.FOOTER_TEXT = "See [link=https://github.com/gjeunen/tombRaider]https://github.com/gjeunen/tombRaider[/] for more details."
click.rich_click.ERRORS_SUGGESTION = f"This is tombRaider [cyan]v{__version__}[/]\nFor more help, run '[yellow]tombRaider --help[/]' or visit [link=https://github.com/gjeunen/tombRaider]https://github.com/gjeunen/tombRaider[/]"
click.rich_click.STYLE_ERRORS_SUGGESTION = ""
click.rich_click.OPTION_GROUPS = {
    "tombRaider": [
        {
            "name": "Main function",
            "options": [
                "--method",
            ],
        },
        {
            "name": "Parameters",
            "options": [
                "--occurrence-type",
                "--detection-threshold",
                "--similarity",
                "--negative",
                "--ratio",
            ],
        },
        {
            "name": "Input files",
            "options": [
                "--frequency-input",
                "--sequence-input",
                "--blast-input",
                "--bold-input",
                "--sintax-input",
                "--idtaxa-input",
            ],
        },
        {
            "name": "Output files",
            "options": [
                "--frequency-output",
                "--sequence-output",
                "--blast-output",
                "--bold-output",
                "--sintax-output",
                "--idtaxa-output",
                "--condensed-log",
                "--detailed-log",
            ],
        },
        {
            "name": "Frequency file details",
            "options": [
                "--taxa-are-rows",
                "--omit-rows",
                "--omit-columns",
                "--sort",
            ],
        },
        {
            "name": "Taxonomy file details",
            "options": [
                "--seqname",
                "--taxid",
                "--pident",
                "--qcov",
                "--eval",
            ],
        },
    ],
}

@click.command(context_settings=dict(help_option_names=["-h", "--help"]))
@click.option("--method", default = 'taxon-dependent co-occurrence', help = "merging method ('taxon-dependent co-occurrence' [default], 'taxon-independent co-occurrence', 'taxon-dependent merging')")
@click.option("--frequency-input", "frequency_input_", help = "frequency table input file name")
@click.option("--sequence-input", "sequence_input_", help = "sequence input file name")
@click.option("--blast-input", "blast_input_", help = "blast input file name")
@click.option("--bold-input", "bold_input_", help = "bold input file name")
@click.option("--sintax-input", "sintax_input_", help = "sintax input file name")
@click.option("--idtaxa-input", "idtaxa_input_", help = "idtaxa input file name")
@click.option("--frequency-output", "frequency_output_", help = "frequency table output file name")
@click.option("--sequence-output", "sequence_output_", help = "sequence output file name")
@click.option("--blast-output", "blast_output_", help = "blast output file name")
@click.option("--bold-output", "bold_output_", help = "bold output file name")
@click.option("--sintax-output", "sintax_output_", help = "sintax output file name")
@click.option("--idtaxa-output", "idtaxa_output_", help = "idtaxa output file name")
@click.option("--condensed-log", "condensed_log_", help = "condensed log output file name")
@click.option("--detailed-log", "detailed_log_", help = "detailed log output file name")
@click.option("--occurrence-type", "occurrence_type_", default = 'abundance', help = "data structure type to assess co-occurrence pattern ('presence-absence' or 'abundance' [default])")
@click.option("--detection-threshold", "detection_threshold_", default = 1, help = "detection threshold to consider true detection")
@click.option("--similarity", default = 90, help = "similarity threshold needed between child and parent")
@click.option("--negative", help = "list of negative control samples")
@click.option("--ratio", default = 1.0, help = "minimum ratio for co-occurrence pattern to hold true")
@click.option("--seqname", default = 0, help = "position of the sequence name information in the BLAST input file")
@click.option("--taxid", default = 3, help = "position of the taxonomic id number information in the BLAST input file")
@click.option("--pident", default = 5, help = "position of the percent identity information in the BLAST input file")
@click.option("--qcov", default = 7, help = "position of the query coverage information in the BLAST input file")
@click.option("--eval", "eval_", default = 8, help = "position of the e-value information in the BLAST input file")
@click.option("--taxa-are-rows", "taxa_are_rows_", default = True, help = "True: column headers = samples; False: column headers = taxa")
@click.option("--omit-rows", "omit_rows_", help = "a list of row labels to drop from the frequency table")
@click.option("--omit-columns", "omit_columns_", help = "a list of column labels to drop from the frequency table")
@click.option("--sort", "sort_", help = "method to sort input files ('total read count', 'average read count', 'detections')")
@click.option("--example-run", "example_run_", is_flag = True, help = "run tombRaider using the example files")



def tombRaider(method, frequency_input_, sequence_input_, blast_input_, bold_input_, sintax_input_, idtaxa_input_, frequency_output_, sequence_output_, blast_output_, bold_output_, sintax_output_, idtaxa_output_, condensed_log_, detailed_log_, occurrence_type_, detection_threshold_, similarity, negative, ratio, seqname, taxid, pident, qcov, eval_, taxa_are_rows_, omit_rows_, omit_columns_, sort_, example_run_):
    """tombRaider is a taxon-dependent co-occurrence algorithm to identify and remove artefacts from metabarcoding datasets.
    
    The algorithm identifies parent-child sequences based on taxonomic ID, sequence similarity thesholds, and sample co-occurrence patterns. Besides the main algorithm, implementations for two other approaches to identify artefact sequences are incorporated, including a taxon-independent co-occurrence model and
    taxon-dependent merging.
    


    To create the BLAST input file, use the blastn -outfmt '6 qaccver saccver ssciname staxid length pident mismatch qcovs evalue bitscore qstart qend sstart send gapopen' parameter to enable the default settings for '--seqname' , '--taxid', '--pident', '--qcov', and '--eval'. Other formats besides '-outfmt 6' are currently not supported by tombRaider.

    
    
    To run tombRaider with default settings, use: 
    
    [blue bold]tombRaider --method 'taxon-dependent co-occurrence' --frequency-input count.txt --taxonomy-input blast.txt --sequence-input otu.fasta --frequency-output count_new.txt --taxonomy-output blast_new.txt --sequence-output otu_new.fasta --occurrence-type abundance[/]
    """
    console = rich.console.Console(stderr=True, highlight=False)
    console.print(f"\n[yellow]/[/][cyan]/[/][yellow]/[/] [bold][link=https://github.com/gjeunen/tombRaider]tombRaider[/link][/] | v{__version__}\n")

    # check if example-run needs to be executed
    if example_run_:
        print(os.path.realpath('tombRaider'))
        exit()

    # check --method option is valid and pass parameters to the function file
    if method == 'taxon-dependent co-occurrence':
        console.print(f"[cyan]|              Method[/] | {method} (default)")
        _ = taxonDependentCoOccurrenceAlgorithm(frequency_input_, sequence_input_, blast_input_, bold_input_, sintax_input_, idtaxa_input_, frequency_output_, sequence_output_, blast_output_, bold_output_, sintax_output_, idtaxa_output_, condensed_log_, detailed_log_, occurrence_type_, detection_threshold_, similarity, negative, ratio, seqname, taxid, pident, qcov, eval_, taxa_are_rows_, omit_rows_, omit_columns_, sort_)
    elif method == 'taxon-independent co-occurrence':
        console.print(f"[cyan]|              Method[/] | {method}")
        _ = taxonIndependentCoOccurrenceAlgorithm(frequency_input_, sequence_input_, blast_input_, bold_input_, sintax_input_, idtaxa_input_, frequency_output_, sequence_output_, blast_output_, bold_output_, sintax_output_, idtaxa_output_, condensed_log_, detailed_log_, occurrence_type_, detection_threshold_, similarity, negative, ratio, seqname, taxid, pident, qcov, eval_, taxa_are_rows_, omit_rows_, omit_columns_, sort_)
    elif method == 'taxon-dependent merging':
        console.print(f"[cyan]|              Method[/] | {method}")
        _ = taxonDependentMergingAlgorithm(frequency_input_, sequence_input_, blast_input_, bold_input_, sintax_input_, idtaxa_input_, frequency_output_, sequence_output_, blast_output_, bold_output_, sintax_output_, idtaxa_output_, condensed_log_, detailed_log_, occurrence_type_, detection_threshold_, similarity, negative, ratio, seqname, taxid, pident, qcov, eval_, taxa_are_rows_, omit_rows_, omit_columns_, sort_)
    elif method == None:
        console.print("[cyan]|              Method[/] | [bold yellow]parameter --method not specified, aborting analysis...[/]")
        exit()
    else:
        console.print("[cyan]|               ERROR[/] | [bold yellow]option for '--method' not identified, aborting analysis...[/]\n")
        exit()

if __name__ == "__main__":
    tombRaider()